daemon off;
#Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections 1024;
}



http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;

  server_tokens off;

  map $upstream_response_time $urt {
    default               $upstream_response_time;
    "-"                   "0.000";
    ""                    "0.000";
  }

  map $http_user_agent $ua {
    default               $http_user_agent;
    "-"                   "unknown";
    ""                    "unknown";
  }

  map $http_X_Akamai_Edgescape $esc {
    default               $http_X_Akamai_Edgescape;
    "-"                   "none";
    ""                    "none";
  }

  map $http_X_Akamai_Edgescape $country {
    default               "us";
    "~country_code=([A-Z]{2})"               "$1";
  }


  map $host $logz_token {
    default <%= ENV['LOGZ_TOKEN'] %>;
  }

  log_format l2met '{"measure#nginx.service":$request_time, "request_id":"$http_x_request_id", "token":"$logz_token"}';
  #path="$request_uri" upstream_response_time=$urt country="$country" edgescape="$esc" user_agent="$ua" status=$status method="$request_method" token=$logz_token';
  error_log syslog:server=listener.logz.io:5050 error;
  access_log syslog:server=listener.logz.io:5050 l2met;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  #client_body_timeout 5;

  proxy_cache_path /app/cache keys_zone=cache:10m levels=1:2 inactive=600s max_size=100m;



  server {
    listen <%= ENV["PORT"] %>;
    server_name _;
    #access_log off;
    #keepalive_timeout 5;

    location ~* (collections|live|products|epg|schedule|fullproducts|playlists|headers) {
      rewrite schedule epg permanent;

      include cors_support;
      gzip on;
      set $no_cache "";

      if ($request_method !~ ^(GET|HEAD)$) {
        set $no_cache "1";
      }

      add_header X-Cache-Status $upstream_cache_status;

      if ($no_cache = "1") {
        add_header Set-Cookie "_mcnc=1; Max-Age=2; Path=/";
        add_header X-Microcachable "0";
      }

      if ($http_cookie ~* "_mcnc") {
        set $no_cache "1";
      }



      proxy_pass <%= ENV['BENDER_URI'] %>;
      proxy_no_cache $no_cache;
      proxy_cache cache;
      proxy_cache_key $scheme$host$request_method$request_uri$country;
      proxy_cache_lock on;
      proxy_cache_valid 200 3s;
      proxy_cache_use_stale updating;

    }


    location ~* (resources) {
      include cors_support;
      set $no_cache "";
      gzip on;

      if ($request_method !~ ^(GET|HEAD)$) {
          set $no_cache "1";
      }

      if ($no_cache = "1") {
        add_header Set-Cookie "_mcnc=1; Max-Age=2; Path=/";
        add_header X-Microcachable "0";
      }

      if ($http_cookie ~* "_mcnc") {
        set $no_cache "1";
      }

      proxy_no_cache $no_cache;

      proxy_pass <%= ENV['DEWEY_URI'] %>;
      proxy_cache cache;
      proxy_cache_key $scheme$host$request_method$request_uri;
      proxy_cache_lock on;
      proxy_cache_valid 200 3s;
      proxy_cache_use_stale updating;
    }

    location ~* (session) {
      include cors_support;
      proxy_pass <%= ENV['BOXY_URI'] %>;
    }

    location ~* (search) {
      include cors_support;
      gzip on;
      set $no_cache "";

      if ($request_method !~ ^(GET|HEAD)$) {
        set $no_cache "1";
      }

      add_header X-Cache-Status $upstream_cache_status;

      if ($no_cache = "1") {
        add_header Set-Cookie "_mcnc=1; Max-Age=2; Path=/";
        add_header X-Microcachable "0";
      }

      if ($http_cookie ~* "_mcnc") {
        set $no_cache "1";
      }

      proxy_pass <%= ENV['SEARCH_URI'] %>;
      proxy_no_cache $no_cache;
      proxy_cache cache;
      proxy_cache_key $scheme$host$request_method$request_uri;
      proxy_cache_lock on;
      proxy_cache_valid 200 3s;
      proxy_cache_use_stale updating;

    }
  }
}
